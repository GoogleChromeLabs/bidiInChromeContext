/**
 * Copyright 2024 Google LLC.
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * THIS FILE IS AUTOGENERATED by cddlconv 0.1.5.
 * Run `node tools/generate-bidi-types.mjs` to regenerate.
 * @see https://github.com/w3c/webdriver-bidi/blob/master/index.bs
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck Some types may be circular.

import z from 'zod';

export namespace Bluetooth {
  export const RequestDeviceSchema = z.lazy(() => z.string());
}
export namespace Bluetooth {
  export const RequestDeviceInfoSchema = z.lazy(() =>
    z.object({
      id: Bluetooth.RequestDeviceSchema,
      name: z.union([z.string(), z.null()]),
    })
  );
}
export namespace Bluetooth {
  export const RequestDevicePromptSchema = z.lazy(() => z.string());
}
export namespace Bluetooth {
  export const HandleRequestDevicePromptSchema = z.lazy(() =>
    z.object({
      method: z.literal('bluetooth.handleRequestDevicePrompt'),
      params: Bluetooth.HandleRequestDevicePromptParametersSchema,
    })
  );
}
export namespace Bluetooth {
  export const HandleRequestDevicePromptParametersSchema = z.lazy(() =>
    z
      .object({
        context: z.string(),
        prompt: Bluetooth.RequestDevicePromptSchema,
      })
      .and(
        z.union([
          Bluetooth.HandleRequestDevicePromptAcceptParametersSchema,
          Bluetooth.HandleRequestDevicePromptCancelParametersSchema,
        ])
      )
  );
}
export namespace Bluetooth {
  export const HandleRequestDevicePromptAcceptParametersSchema = z.lazy(() =>
    z.object({
      accept: z.literal(true),
      device: Bluetooth.RequestDeviceSchema,
    })
  );
}
export namespace Bluetooth {
  export const HandleRequestDevicePromptCancelParametersSchema = z.lazy(() =>
    z.object({
      accept: z.literal(false),
    })
  );
}
export namespace Bluetooth {
  export const RequestDevicePromptUpdatedSchema = z.lazy(() =>
    z.object({
      method: z.literal('bluetooth.requestDevicePromptUpdated'),
      params: Bluetooth.RequestDevicePromptUpdatedParametersSchema,
    })
  );
}
export namespace Bluetooth {
  export const RequestDevicePromptUpdatedParametersSchema = z.lazy(() =>
    z.object({
      context: z.string(),
      prompt: Bluetooth.RequestDevicePromptSchema,
      devices: z.array(Bluetooth.RequestDeviceInfoSchema),
    })
  );
}
